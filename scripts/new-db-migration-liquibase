#!/usr/bin/env bash

set -Eeuo pipefail

if [ $# -eq 0 ]; then
    echo "Usage: <migration-name>"
    exit 1
fi

migrations_path="./modules/db/src/main/resources/migrations"
mkdir -p "${migrations_path}"

num_migrations=$(find "${migrations_path}" -maxdepth 1 -type f -name "*.sql" | wc -l)

migration_path="${migrations_path}/V$(($num_migrations + 1))__$(echo "$@" | sed 's/[^a-zA-Z0-9._-]/_/g').sql"
changelog_path="${migration_path}.yml"
target_db_path="${migration_path}.target.db"
reference_db_path="${migration_path}.reference.db"

echo "Set up reference database from schema"
rm -f "$reference_db_path"
cat schema.sql | sqlite3 "${reference_db_path}"

echo "Set up target database by running all migrations"
rm -f "$target_db_path"
cat <(echo "") $(find "${migrations_path}" -maxdepth 1 -type f -name "*.sql" | sort) | sqlite3 "${target_db_path}"

echo "Calculate diff and create changelog"
rm -f "$changelog_path"
liquibase diff --referenceUrl="jdbc:sqlite:${target_db_path}?foreign_keys=on" --url="jdbc:sqlite:${reference_db_path}?foreign_keys=on"
liquibase diffChangeLog --url="jdbc:sqlite:${target_db_path}?foreign_keys=on" --referenceUrl="jdbc:sqlite:${reference_db_path}?foreign_keys=on" --changelogFile="${changelog_path}"

# yq -e '.databaseChangeLog[].changeSet.runInTransaction = false' "${changelog_path}" > newfile
# mv newfile ${changelog_path}

echo "Generate sql migration from changelog"
# TODO: This does not work for a lot of operations with sqlite, because statements need a live db connection.
# liquibase update-sql --url="offline:sqlite" --outputFile="${migration_path}" --changelogFile="${changelog_path}"
# TODO: this does not work for a lot of operations with sqlite, because statements are volatile
# https://github.com/liquibase/liquibase/issues/5515
# liquibase update-sql --url="jdbc:sqlite:${target_db_path}?foreign_keys=on" --outputFile="${migration_path}" --changelogFile="${changelog_path}"
# docker run -w /app -v $PWD:/app liquibase/liquibase --log-level=SEVERE --sql-log-level=SEVERE --log-file=${migration_path} update --url="jdbc:sqlite:${target_db_path}?foreign_keys=on" --changelogFile="${changelog_path}"
# Workaround: instead we run an update on the target db and log the sql statement :/
liquibase --log-level=SEVERE --sql-log-level=SEVERE --log-file=${migration_path} update --url="jdbc:sqlite:${target_db_path}?foreign_keys=on" --changelogFile="${changelog_path}"
sed -i 's/^\[[^]]*\][^[]*\[liquibase.executor\] //' "${migration_path}"
sed -i ':a;N;$!ba;s/\n[0-9][0-9]* row(s) affected/;/g' "${migration_path}"
sed -i -e 's/^INSERT INTO DATABASECHANGELOG.*//' -e '/^CREATE TABLE DATABASECHANGELOG/d' -e '/^DELETE FROM DATABASECHANGELOGLOCK/d' "${migration_path}"

echo
cat "$changelog_path"

rm "$target_db_path" "$reference_db_path" "$changelog_path"

echo "Migration written to: ${migration_path}"
