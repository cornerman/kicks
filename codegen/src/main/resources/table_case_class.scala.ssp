package kicks.db.${schema.scalaName}

#for (table <- schema.tables)

case class ${table.rowBase.scalaName}(
  #for (column <- table.rowBase.columns)
  column.scalaName: column.scalaType,
  #end
)
object ${table.rowBase.scalaName} {
  #for (row <- table.rowVariations)
  case class ${row.scalaName}(
    #for (column <- row.columns)
    column.scalaName: column.scalaType,
    #end
  )
}

#end

#for (enum <- schema.enums)

enum ${enum.scalaName}(val sqlValue: String) {
  #for (enumValue <- enum.values)
  case ${enumValue.scalaName} extends ${enum.scalaName}("${enumValue.value}")
  #end
}
object ${enum.scalaName} {
  def bySqlValue(searchValue: String): Option[${enum.scalaName}] = values.find(_.sqlValue == searchValue)
}

#end
